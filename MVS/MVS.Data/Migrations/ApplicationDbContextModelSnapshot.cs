// <auto-generated />
using System;
using MVS.Common.Models;
using MVS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVS.Data.Migrations
{
    [DbContext(typeof(mvsrecetteContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MVS.Common.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Answer1")
                        .HasColumnType("int")
                        .HasColumnName("Answer")
                        .HasComment("id Réponse du user parmi les réponses possibles");

                    b.Property<string>("Comment")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Champ libre pour compléments");

                    b.Property<int>("IdBeneficiary")
                        .HasColumnType("int")
                        .HasColumnName("idBeneficiary")
                        .HasComment("Id bénéficiaire/dossier pour lequel répond");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser")
                        .HasComment("Id user répond à la question");

                    b.HasKey("Id");

                    b.HasIndex("Answer1");

                    b.HasIndex("IdBeneficiary");

                    b.HasIndex("IdUser");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MVS.Common.Models.Ask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Ask1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Ask")
                        .HasComment("Type de demande pour un dossier");

                    b.Property<string>("ResourceKey")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Clé pour ressources externes et traduction");

                    b.HasKey("Id");

                    b.ToTable("Ask", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    /*b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");*/

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MVS.Common.Models.Beneficiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Ask")
                        .HasColumnType("int")
                        .HasComment("id du type de demande pour ce dossier");

                    b.Property<bool?>("Consent")
                        .HasColumnType("bit")
                        .HasComment("Consentement du bénéficiaire effectif à la demande (Oui/non)");

                    b.Property<int?>("CoupleSituation")
                        .HasColumnType("int")
                        .HasComment("id, le cas échéant, de la situation de coupke du bénéficiare effectif");

                    b.Property<int?>("Dossier")
                        .HasColumnType("int")
                        .HasComment("Numéro de dossier");

                    b.Property<int?>("FamilialSituation")
                        .HasColumnType("int")
                        .HasComment("id de la situation familiale du bénéficiaire effectif");

                    b.Property<string>("FatherName")
                        .HasMaxLength(258)
                        .HasColumnType("nchar(258)")
                        .IsFixedLength()
                        .HasComment("Nom et Prénom du Père du bénéficiaire effectif");

                    b.Property<int?>("Gir")
                        .HasColumnType("int")
                        .HasColumnName("GIR")
                        .HasComment("Indicateur français d'autonomie de 1 à 6");

                    b.Property<int?>("IdTribunal")
                        .HasColumnType("int")
                        .HasColumnName("idTribunal")
                        .HasComment("Id du Tribunal compétent pour ce dossier");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser")
                        .HasComment("Id du bénéficiaire effectif");

                    b.Property<int?>("MatrimonialRegime")
                        .HasColumnType("int")
                        .HasComment("id, le cas échéant, du régime matrimonial du bénéficiaire effectif");

                    b.Property<string>("MotherName")
                        .HasMaxLength(258)
                        .HasColumnType("nchar(258)")
                        .IsFixedLength()
                        .HasComment("Nom et Prénom de la mère du bénéficiaire effectif");

                    b.Property<int?>("ProtectiveMeasure")
                        .HasColumnType("int")
                        .HasComment("id de la mesure de protection préconisée pour ce dossier");

                    b.Property<bool?>("Regularise")
                        .HasColumnType("bit")
                        .HasComment("Régularité de la situation du bénéficiaire effectif sur le territoire");

                    b.Property<bool?>("SpouseDeathConsequence")
                        .HasColumnType("bit")
                        .HasComment("Conséquences suite au décès (Oui/non)");

                    b.Property<DateTime?>("SpouseDeathDate")
                        .HasColumnType("date")
                        .HasComment("Date, si nécessaire, de la date du décès de l'epoux du bénéficiaire effectif");

                    b.Property<int?>("SpouseSituation")
                        .HasColumnType("int")
                        .HasComment("id, le cas échéant, de la situation de l'époux du bénéficiaire final");

                    b.HasKey("Id");

                    b.HasIndex("Ask");

                    b.HasIndex("CoupleSituation");

                    b.HasIndex("FamilialSituation");

                    b.HasIndex("IdUser");

                    b.HasIndex("MatrimonialRegime");

                    b.HasIndex("ProtectiveMeasure");

                    b.HasIndex("SpouseSituation");

                    b.ToTable("Beneficiary", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Alimony")
                        .HasColumnType("int")
                        .HasComment("Budget Pension");

                    b.Property<int>("ApaAid")
                        .HasColumnType("int")
                        .HasColumnName("APA_aid")
                        .HasComment("Aide APA pour un mois");

                    b.Property<int>("AssetIncomes")
                        .HasColumnType("int")
                        .HasComment("Revenus d'actifs");

                    b.Property<int>("ElectricityWater")
                        .HasColumnType("int")
                        .HasColumnName("Electricity_Water")
                        .HasComment("Budget Electricité Eau");

                    b.Property<int>("Gift")
                        .HasColumnType("int")
                        .HasComment("Budget cadeaux");

                    b.Property<int>("HealthInsurance")
                        .HasColumnType("int")
                        .HasComment("Budget Mutuelle");

                    b.Property<int>("IdBeneficiary")
                        .HasColumnType("int")
                        .HasColumnName("idBeneficiary")
                        .HasComment("id du bénéficiaire effectif");

                    b.Property<int?>("Income")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(([APA_aid]+[AssetIncomes])+[Alimony])", false)
                        .HasComment("Somme revenus");

                    b.Property<int>("InternetPhone")
                        .HasColumnType("int")
                        .HasColumnName("Internet_Phone")
                        .HasComment("Budget pour Telephone et Internet");

                    b.Property<int>("Leisure")
                        .HasColumnType("int")
                        .HasComment("Budget Loisirs");

                    b.Property<int?>("Outcome")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(((((((([Gift]+[Taxes])+[Rent])+[SAAD])+[ParamedicalSupport])+[Electricity_Water])+[Internet_Phone])+[HealthInsurance])+[Leisure])", false)
                        .HasComment("Somme");

                    b.Property<int>("ParamedicalSupport")
                        .HasColumnType("int")
                        .HasComment("Budget pour Support Paramedical Support");

                    b.Property<int>("Rent")
                        .HasColumnType("int")
                        .HasComment("Budget pour le loyer");

                    b.Property<int>("Saad")
                        .HasColumnType("int")
                        .HasColumnName("SAAD")
                        .HasComment("Budget pour aide à domicile");

                    b.Property<int>("Taxes")
                        .HasColumnType("int")
                        .HasComment("Budget Impôts");

                    b.Property<int?>("Total")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("((((((((((([Alimony]+[AssetIncomes])+[APA_aid])-[Gift])-[Taxes])-[Rent])-[SAAD])-[ParamedicalSupport])-[Electricity_Water])-[Internet_Phone])-[HealthInsurance])-[Leisure])", false)
                        .HasComment("Total : Revenus -");

                    b.HasKey("Id");

                    b.HasIndex("IdBeneficiary");

                    b.ToTable("Budget", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.VaultCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("VaultCategory", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.CivilStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BirthCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<int?>("BirthZip")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<bool?>("Sex")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CivilStatus", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.VaultContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Ville de l'adresse");

                    b.Property<string>("Country")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasComment("Pays de l'adresse");

                    b.Property<string>("Mail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("");

                    b.Property<int?>("MobilePhone")
                        .HasColumnType("int")
                        .HasComment("Téléphone Mobile");

                    b.Property<int?>("Phone")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<string>("Street")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Rue de l'adresse");

                    b.Property<int?>("Zip")
                        .HasColumnType("int")
                        .HasComment("Code Postal de l'adresse");

                    b.HasKey("Id");

                    b.ToTable("VaultContact", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.CoupleSituation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CoupleSituation1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CoupleSituation")
                        .HasComment("Type de situation de couple");

                    b.Property<string>("ResourceKey")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Clé pour ressources externes et traduction");

                    b.HasKey("Id");

                    b.ToTable("CoupleSituation", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnswerCondition")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasComment("Réponse à la question conditionnant la nécessité de ce document");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)")
                        .HasComment("Nom du document");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(2056)
                        .HasColumnType("nvarchar(2056)")
                        .HasComment("Url où est stocké le document");

                    b.Property<int?>("IdQuestions")
                        .HasColumnType("int")
                        .HasColumnName("idQuestions")
                        .HasComment("id Question liée au document");

                    b.HasKey("Id");

                    b.HasIndex("IdQuestions");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MVS.Common.Models.Entourage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Cohabitant")
                        .HasColumnType("bit")
                        .HasComment("personne vit avec le beneficiaire effectif (oui/non)");

                    b.Property<bool?>("Consult")
                        .HasColumnType("bit")
                        .HasComment("Demande avis à cette personne (oui/non)");

                    b.Property<int?>("DistanceFromBenef")
                        .HasColumnType("int")
                        .HasComment("Distance de son domicile à celui du beneficiaire effectif");

                    b.Property<int?>("Frequency")
                        .HasColumnType("int")
                        .HasComment("Frequence des visites au bénéficiaire effectif");

                    b.Property<bool?>("Helper")
                        .HasColumnType("bit")
                        .HasComment("Aidant de la personne beneficiaire (oui/non)");

                    b.Property<int?>("IdBeneficiary")
                        .HasColumnType("int")
                        .HasColumnName("idBeneficiary")
                        .HasComment("id bénéficiaire effectif");

                    b.Property<int>("IdContact")
                        .HasColumnType("int")
                        .HasColumnName("idContact")
                        .HasComment("id contact de la personne entourage");

                    b.Property<int?>("IdJob")
                        .HasColumnType("int")
                        .HasColumnName("idJob");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("date")
                        .HasComment("Dernière visite au béénéficiaire effectif");

                    b.Property<string>("Organisation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Le cas échéant, le nom de l'organisation à laquelle est reliée la personne de l'entourage");

                    b.Property<bool?>("Professional")
                        .HasColumnType("bit")
                        .HasComment("Professionnel ou Particulier");

                    b.Property<int?>("TiesType")
                        .HasColumnType("int")
                        .HasComment("id lien avec le beneficiaire effectif");

                    b.Property<int?>("WantToCare")
                        .HasColumnType("int")
                        .HasComment("Volonté de devenir protecteur (oui/non)");

                    b.HasKey("Id");

                    b.HasIndex("IdBeneficiary");

                    b.HasIndex("IdContact");

                    b.HasIndex("IdJob");

                    b.HasIndex("IdUser");

                    b.HasIndex("TiesType");

                    b.ToTable("Entourage", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.FamilialSituation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ResourceKey")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Clé pour ressources externes et traductions");

                    b.Property<string>("Situation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Type de situation familiale");

                    b.HasKey("Id");

                    b.ToTable("FamilialSituation", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.Vault", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Field")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOnCuratorship")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipceCodeAndCity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("MVS.Common.Models.JobProfessionel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("JobProfessionel")
                        .IsRequired()
                        .HasMaxLength(158)
                        .IsUnicode(false)
                        .HasColumnType("varchar(158)")
                        .HasColumnName("JobProfessionel");

                    b.HasKey("Id");

                    b.ToTable("JobProfessionel", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.MatrimonialRegime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Regime")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Type de régime matrimonial");

                    b.Property<string>("ResourceKey")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Clé pour ressources externes et traduction");

                    b.HasKey("Id");

                    b.ToTable("MatrimonialRegime", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.PossibleAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int")
                        .HasComment("Id question correspondant aux reponses potentielles");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Réponses potentielles");

                    b.HasKey("Id");

                    b.HasIndex("IdQuestion");

                    b.ToTable("PossibleAnswers");
                });

            modelBuilder.Entity("MVS.Common.Models.ProtectiveMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Measure")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Type de mesures de protection préconisée");

                    b.Property<string>("ResourceKey")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Clé pour ressources externes et traduction");

                    b.HasKey("Id");

                    b.ToTable("ProtectiveMeasure", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Description eventuelle");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int")
                        .HasColumnName("idCategory")
                        .HasComment("id Catégorie liée à la question");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Titre de la question");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MVS.Common.Models.SpouseSituation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ResourceKey")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Clé pour ressources externes et traduction");

                    b.Property<string>("SpouseSituation1")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("SpouseSituation")
                        .HasComment("Type de siatuation de l'époux");

                    b.HasKey("Id");

                    b.ToTable("SpouseSituation", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.TiesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ResourceKey")
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Clé pour les ressources externes et traductions");

                    b.Property<string>("Ties")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Type de lien avec le bénéficiaire effectif");

                    b.HasKey("Id");

                    b.ToTable("TiesType", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.Tribunal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdContact")
                        .HasColumnType("int")
                        .HasComment("id contact du tribunal");

                    b.Property<string>("TribunalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasComment("Nom du tribunal");

                    b.HasKey("Id");

                    b.HasIndex("IdContact");

                    b.ToTable("Tribunal", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdCivilStatus")
                        .HasColumnType("int")
                        .HasColumnName("idCivilStatus")
                        .HasComment("id Statut civil du user");

                    b.Property<int>("IdContact")
                        .HasColumnType("int")
                        .HasColumnName("idContact")
                        .HasComment("id contact du user");

                    b.Property<int?>("IdJob")
                        .HasColumnType("int")
                        .HasColumnName("idJob")
                        .HasComment("id correspondant");

                    b.HasKey("Id");

                    b.HasIndex("IdCivilStatus");

                    b.HasIndex("IdContact");

                    b.HasIndex("IdJob");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("MVS.Common.Models.Answer", b =>
                {
                    b.HasOne("MVS.Common.Models.PossibleAnswer", "Answer1Navigation")
                        .WithMany("Answers")
                        .HasForeignKey("Answer1")
                        .IsRequired()
                        .HasConstraintName("FK_Answers_PossibleAnswers");

                    b.HasOne("MVS.Common.Models.Beneficiary", "IdBeneficiaryNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("IdBeneficiary")
                        .IsRequired()
                        .HasConstraintName("FK_Answers_Beneficiary");

                    b.HasOne("MVS.Common.Models.User", "IdUserNavigation")
                        .WithMany("Answers")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Answers_User");

                    b.Navigation("Answer1Navigation");

                    b.Navigation("IdBeneficiaryNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("MVS.Common.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("MVS.Common.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("MVS.Common.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetUserToken", b =>
                {
                    b.HasOne("MVS.Common.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVS.Common.Models.Beneficiary", b =>
                {
                    b.HasOne("MVS.Common.Models.Ask", "AskNavigation")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("Ask")
                        .HasConstraintName("FK_Beneficiary_Ask");

                    b.HasOne("MVS.Common.Models.CoupleSituation", "CoupleSituationNavigation")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("CoupleSituation")
                        .HasConstraintName("FK_Beneficiary_CoupleSituation");

                    b.HasOne("MVS.Common.Models.FamilialSituation", "FamilialSituationNavigation")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("FamilialSituation")
                        .HasConstraintName("FK_Beneficiary_FamilialSituation");

                    b.HasOne("MVS.Common.Models.User", "IdUserNavigation")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Beneficiary_User");

                    b.HasOne("MVS.Common.Models.MatrimonialRegime", "MatrimonialRegimeNavigation")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("MatrimonialRegime")
                        .HasConstraintName("FK_Beneficiary_MatrimonialRegime");

                    b.HasOne("MVS.Common.Models.ProtectiveMeasure", "ProtectiveMeasureNavigation")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("ProtectiveMeasure")
                        .HasConstraintName("FK_Beneficiary_ProtectiveMeasure");

                    b.HasOne("MVS.Common.Models.SpouseSituation", "SpouseSituationNavigation")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("SpouseSituation")
                        .HasConstraintName("FK_Beneficiary_SpouseSituation");

                    b.Navigation("AskNavigation");

                    b.Navigation("CoupleSituationNavigation");

                    b.Navigation("FamilialSituationNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("MatrimonialRegimeNavigation");

                    b.Navigation("ProtectiveMeasureNavigation");

                    b.Navigation("SpouseSituationNavigation");
                });

            modelBuilder.Entity("MVS.Common.Models.Budget", b =>
                {
                    b.HasOne("MVS.Common.Models.Beneficiary", "IdBeneficiaryNavigation")
                        .WithMany("Budgets")
                        .HasForeignKey("IdBeneficiary")
                        .IsRequired()
                        .HasConstraintName("FK_Budget_Beneficiary");

                    b.Navigation("IdBeneficiaryNavigation");
                });

            modelBuilder.Entity("MVS.Common.Models.Document", b =>
                {
                    b.HasOne("MVS.Common.Models.Question", "IdQuestionsNavigation")
                        .WithMany("Documents")
                        .HasForeignKey("IdQuestions")
                        .HasConstraintName("FK_Documents_Questions");

                    b.Navigation("IdQuestionsNavigation");
                });

            modelBuilder.Entity("MVS.Common.Models.Entourage", b =>
                {
                    b.HasOne("MVS.Common.Models.Beneficiary", "IdBeneficiaryNavigation")
                        .WithMany("Entourages")
                        .HasForeignKey("IdBeneficiary")
                        .HasConstraintName("FK_Entourage_Beneficiary");

                    b.HasOne("MVS.Common.Models.VaultContact", "IdContactNavigation")
                        .WithMany("Entourages")
                        .HasForeignKey("IdContact")
                        .IsRequired()
                        .HasConstraintName("FK_Entourage_Adress/VaultContact");

                    b.HasOne("MVS.Common.Models.JobProfessionel", "IdJobNavigation")
                        .WithMany("Entourages")
                        .HasForeignKey("IdJob")
                        .HasConstraintName("FK_Helper_Job");

                    b.HasOne("MVS.Common.Models.User", "IdUserNavigation")
                        .WithMany("Entourages")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_Entourage_User");

                    b.HasOne("MVS.Common.Models.TiesType", "TiesTypeNavigation")
                        .WithMany("Entourages")
                        .HasForeignKey("TiesType")
                        .HasConstraintName("FK_Entourage_TiesType");

                    b.Navigation("IdBeneficiaryNavigation");

                    b.Navigation("IdContactNavigation");

                    b.Navigation("IdJobNavigation");

                    b.Navigation("IdUserNavigation");

                    b.Navigation("TiesTypeNavigation");
                });

            modelBuilder.Entity("MVS.Common.Models.PossibleAnswer", b =>
                {
                    b.HasOne("MVS.Common.Models.Question", "IdQuestionNavigation")
                        .WithMany("PossibleAnswers")
                        .HasForeignKey("IdQuestion")
                        .IsRequired()
                        .HasConstraintName("FK_PossibleAnswers_Questions");

                    b.Navigation("IdQuestionNavigation");
                });

            modelBuilder.Entity("MVS.Common.Models.Question", b =>
                {
                    b.HasOne("MVS.Common.Models.VaultCategory", "IdCategoryNavigation")
                        .WithMany("Questions")
                        .HasForeignKey("IdCategory")
                        .IsRequired()
                        .HasConstraintName("FK_Questions_Category");

                    b.Navigation("IdCategoryNavigation");
                });

            modelBuilder.Entity("MVS.Common.Models.Tribunal", b =>
                {
                    b.HasOne("MVS.Common.Models.VaultContact", "IdContactNavigation")
                        .WithMany("Tribunals")
                        .HasForeignKey("IdContact")
                        .IsRequired()
                        .HasConstraintName("FK_Tribunal_Adress/VaultContact");

                    b.Navigation("IdContactNavigation");
                });

            modelBuilder.Entity("MVS.Common.Models.User", b =>
                {
                    b.HasOne("MVS.Common.Models.CivilStatus", "IdCivilStatusNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdCivilStatus")
                        .IsRequired()
                        .HasConstraintName("FK_User_CivilStatus");

                    b.HasOne("MVS.Common.Models.VaultContact", "IdContactNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdContact")
                        .IsRequired()
                        .HasConstraintName("FK_User_Adress/VaultContact");

                    b.HasOne("MVS.Common.Models.JobProfessionel", "IdJobNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdJob")
                        .HasConstraintName("FK_User_Job");

                    b.Navigation("IdCivilStatusNavigation");

                    b.Navigation("IdContactNavigation");

                    b.Navigation("IdJobNavigation");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("MVS.Common.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVS.Common.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVS.Common.Models.Ask", b =>
                {
                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("MVS.Common.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("MVS.Common.Models.Beneficiary", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Budgets");

                    b.Navigation("Entourages");
                });

            modelBuilder.Entity("MVS.Common.Models.VaultCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("MVS.Common.Models.CivilStatus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MVS.Common.Models.VaultContact", b =>
                {
                    b.Navigation("Entourages");

                    b.Navigation("Tribunals");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MVS.Common.Models.CoupleSituation", b =>
                {
                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("MVS.Common.Models.FamilialSituation", b =>
                {
                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("MVS.Common.Models.JobProfessionel", b =>
                {
                    b.Navigation("Entourages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MVS.Common.Models.MatrimonialRegime", b =>
                {
                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("MVS.Common.Models.PossibleAnswer", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("MVS.Common.Models.ProtectiveMeasure", b =>
                {
                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("MVS.Common.Models.Question", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("PossibleAnswers");
                });

            modelBuilder.Entity("MVS.Common.Models.SpouseSituation", b =>
                {
                    b.Navigation("Beneficiaries");
                });

            modelBuilder.Entity("MVS.Common.Models.TiesType", b =>
                {
                    b.Navigation("Entourages");
                });

            modelBuilder.Entity("MVS.Common.Models.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Beneficiaries");

                    b.Navigation("Entourages");
                });
#pragma warning restore 612, 618
        }
    }
}
